import slimdom from 'slimdom';

import blueprint from 'fontoxml-blueprints/readOnlyBlueprint';
import evaluateXPathToMap from 'fontoxml-selectors/evaluateXPathToMap';
import evaluateXPathToNumber from 'fontoxml-selectors/evaluateXPathToNumber';
import parseSelector from 'fontoxml-selectors/parsing/createSelectorFromXPath';

let documentNode;
beforeEach(() => {
	documentNode = slimdom.createDocument();
});

describe('map:get', () => {
	it(
		'can get a value from a map',
		() => chai.assert.equal(evaluateXPathToNumber('map:get(map {"a": 1, "b":2}, "a")', documentNode, blueprint), 1));

	it(
		'is aliased to "executing the map function"',
		() => chai.assert.equal(evaluateXPathToNumber('(map {"a": 1, "b":2})("a")', documentNode, blueprint), 1));

	it(
		'returns the correct value when passes NaN',
   		() => chai.assert.equal(evaluateXPathToNumber('(map {number("NaN"): 1, "b":2})(number("NaN"))', documentNode, blueprint), 1));

	it(
		'can be chained',
		() => chai.assert.equal(evaluateXPathToNumber('(map {"a": map{1:1}})("a")(1)', documentNode, blueprint), 1));
});

describe('map:merge', () => {
	it(
		'can merge two maps',
		() => chai.assert.deepEqual(evaluateXPathToMap('map:merge((map {"a": 1}, map{"b":2}))', documentNode, blueprint), {a: 1, b:2}));
});
