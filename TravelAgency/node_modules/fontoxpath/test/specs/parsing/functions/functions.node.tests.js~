import {
	evaluateXPathToStrings,
	domFacade
} from 'fontoxpath';
import jsonMlMapper from 'test-helpers/jsonMlMapper';
import slimdom from 'slimdom';


let documentNode;
beforeEach(() => {
	documentNode = slimdom.createDocument();
});


describe('node-name()', () => {
	it('returns an empty sequence if $arg is an empty sequence', () => {
		const selector = ('node-name(())');
		chai.expect(
			evaluateXPathToStrings(selector, documentNode, domFacade)
		).to.deep.equal([]);
	});

	it('it defaults to the context item when the argument is omitted', () => {
		const selector = ('node-name()');
		jsonMlMapper.parse([
			'someElement',
			[
				'Some text.'
			]
		], documentNode);
		chai.expect(
			evaluateXPathToString(selector, documentNode.firstChild, domFacade)
		).to.equal('someElement');
	});

	it('it returns the node name of the given context', () => {
		const selector = ('node-name(.)');
		jsonMlMapper.parse([
			'someElement',
			[
				'Some text.'
			]
		], documentNode);
		chai.expect(
			evaluateXPathToString(selector, documentNode.firstChild, domFacade)
		).to.equal('someElement');
	});
});

describe('name()', () => {
	it('returns an empty sequence if $arg is an empty sequence',
	   () => chai.assert.deepEqual(evaluateXPathToStrings('name(())', documentNode, domFacade), []));

	it('it defaults to the context item when the argument is omitted', () => {
		jsonMlMapper.parse(['someElement'], documentNode);
		chai.assert.equal(evaluateXPathToString('name()', documentNode.firstChild, domFacade), 'someElement');
	});

	it('it returns the node name of the given context', () => {
		jsonMlMapper.parse(['someElement'], documentNode);
		chai.assert.equal(evaluateXPathToString('name(.)', documentNode.firstChild, domFacade), 'someElement');
	});

	it('it returns the target of a processing instruction', () => {
		jsonMlMapper.parse(['?some-pi', 'some data'], documentNode);
		chai.assert.equal(evaluateXPathToString('name(.)', documentNode.firstChild, domFacade), 'some-pi');
	});

	it('it returns the name of an attribute', () => {
		jsonMlMapper.parse(['someElement', {someAttribute: 'someValue'}], documentNode);
		chai.assert.equal(evaluateXPathToString('name(@someAttribute)', documentNode.firstChild, domFacade), 'someAttribute');
	});

	it('it returns the empty string for comments', () => {
		jsonMlMapper.parse(['!', 'some comment'], documentNode);
		chai.assert.equal(evaluateXPathToStrings('name(.)', documentNode.firstChild, domFacade), '');
	});

	it('it returns the empty string for documents', () => {
		chai.assert.equal(evaluateXPathToStrings('name(.)', documentNode, domFacade), '');
	});
});
