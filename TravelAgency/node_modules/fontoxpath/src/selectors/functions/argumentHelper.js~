import NodeValue from '../dataTypes/NodeValue';
import { castToType } from '../dataTypes/conversionHelper';

/**
 * Test whether the provided argument is valid to be used as an function argument of the given type
 * @param   {string}    argumentType
 * @param   {Sequence}  argument
 * @return  {boolean}
 */
export default function isValidArgument (argumentType, argument) {
	if (argument === null) {
		return true;
	}

	// argumentType is something like 'xs:string?' or 'map(*)'
	var parts = argumentType.match(/^(.*[^+?*])([\+\*\?])?$/);
	var type = parts[1],
	multiplicity = parts[2];
	switch (multiplicity) {
		case '?':
			if (!argument.isEmpty() && !argument.isSingleton()) {
				return false;
			}
			break;

		case '+':
			if (argument.isEmpty()) {
				return false;
			}
			break;

		case '*':
			break;

		default:
			if (!argument.isSingleton()) {
				return false;
			}
	}

	return argument.value.every(function (argumentItem) {
		if (argumentItem.instanceOfType('xs:untypedAtomic')) {
			// We might be able to cast this to the wished type
			argumentItem = castToType(argumentItem, type);
		}

		return argumentItem.instanceOfType(type);
	});
}
