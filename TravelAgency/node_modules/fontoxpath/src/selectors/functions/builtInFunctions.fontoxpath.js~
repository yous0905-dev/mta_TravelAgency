import isSubtypeOf from '../dataTypes/isSubtypeOf';
import Sequence from '../dataTypes/Sequence';
import castToType from '../dataTypes/castToType';
import createAtomicValue from '../dataTypes/createAtomicValue';
import atomize from '../dataTypes/atomize';

function fnNormalizeSpace (_dynamicContext, arg) {
	if (arg.isEmpty()) {
		return Sequence.singleton(createAtomicValue('', 'xs:string'));
	}
	const string = arg.first().value.trim();
	return Sequence.singleton(createAtomicValue(string.replace(/\s+/g, ' '), 'xs:string'));
}

export default {
	declarations: [

		{
			name: 'tokenize',
			argumentTypes: ['xs:string?'],
			returnType: 'xs:string*',
			callFunction: function (dynamicContext, input) {
				return fnTokenize(
					dynamicContext,
					fnNormalizeSpace(dynamicContext, input),
					Sequence.singleton(createAtomicValue(' ', 'xs:string')));
			}
		}

	]
};
