/**
 * @param   {!../util/iterators.AsyncIterator<!Sequence>}  sequences
 * @return  {!Sequence}
 */
export default function concatSortedSequences (_, sequences) {
	let currentSequence = sequences.next();
	if (currentSequence.done) {
		return Sequence.empty();
	}
	let currentIterator = null;
	let previousValue = null;
	return new Sequence({
		next: function () {
			if (!currentSequence.ready) {
				return notReady(currentSequence.promise.then(() => {
					currentSequence = sequences.next();
				}));
			}
			if (currentSequence.done) {
				return currentSequence;
			}
			if (!currentIterator) {
				currentIterator = currentSequence.value.value();
			}

			let value;
			// Scan to the next value
			do {
				value = currentIterator.next();
				if (!value.ready) {
					return value;
				}
				if (value.done) {
					currentSequence = sequences.next();
					if (currentSequence.done) {
						return value;
					}
					currentIterator = currentSequence.value.value();
				}
			} while (value.done || value.value === previousValue);
			previousValue = value.value;
			return value;
		}
	});
}
