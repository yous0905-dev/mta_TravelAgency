import instanceOfType from './instanceOfType';

export default function (value) {
	if (instanceOfType(value, 'xs:anyAtomicType') ||
		instanceOfType(value, 'xs:untypedAtomic') ||
		instanceOfType(value, 'xs:boolean') ||
		instanceOfType(value, 'xs:decimal') ||
		instanceOfType(value, 'xs:double') ||
		instanceOfType(value, 'xs:float') ||
		instanceOfType(value, 'xs:integer') ||
		instanceOfType(value, 'xs:numeric') ||
		instanceOfType(value, 'xs:QName') ||
		instanceOfType(value, 'xs:string')) {
		return value;
	}

	// TODO: implement proper attribute & node atomization
	if (instanceOfType(value, 'attribute()')) {
		return value.typedValue;
	}

	if (instanceOfType(value, 'node()')) {
		return value.typedValue;
	}

	// (function || map) && !array
	if (instanceOfType(value, 'function()')) {
		throw new Error('FOTY0013: Not supported on this type.');
	}
}
