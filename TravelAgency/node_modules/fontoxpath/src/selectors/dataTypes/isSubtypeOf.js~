import builtinDataTypesByName from './builtins/builtinDataTypesByName';
const instanceOfTypeShortcutTable = Object.create(null);

/**
 * xs:int is a subtype of xs:integer
 * xs:decimal is a subtype of xs:numeric
 * xs:NMTOKENS is a subtype of xs:NMTOKEN
 * @param  {./ETypeNames}  subTypeName
 * @param  {./ETypeNames}  superTypeName
 */
export default function isSubtypeOf (subTypeName, superTypeName) {
	console.assert(typeof superTypeName === 'string' && typeof subTypeName === 'string');
	if (subTypeName === superTypeName) {
		return true;
	}
	const superType = builtinDataTypesByName[superTypeName];
	/**
	 * @type {!./types/Type}
	 */
	const subType = builtinDataTypesByName[subTypeName];
	if (superType.variety === 'union') {
		// It is a union type, which can only be the topmost types
		return !!superType.memberTypes.find(memberType => subType.instanceOfType(memberType._name));
	}
	return subType.instanceOfType(superTypeName);
	// const compareKey = `${subTypeName}~${type}`;

	// let precomputedValue = instanceOfTypeShortcutTable[compareKey];
	// if (precomputedValue === undefined) {
	// 	precomputedValue = instanceOfTypeShortcutTable[compareKey] = builtinDataTypesByName[subTypeName].instanceOfType(type);
	// }

	// return precomputedValue;
}
